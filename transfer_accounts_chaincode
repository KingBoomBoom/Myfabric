package main


import(
     "github.com/hyperledger/fabric/core/chaincode/shim"
     "github.com/hyperledger/fabric/protos/peer"
     "fmt"
     "strconv"
)


type PaymentChaincode struct{
	
}


func main(){
	err := shim.Start(new(PaymentChaincode))
	if err != nil{
	     fmt.printf("启动PaymentChaincode失败:%s",err)
	}
}


func (t *PaymentChaincode) Init(stub shim.ChaincodeStubInterface) peer.response{
	
	//获取参数
	_,args := stub.GetFunctionAndParameters()
	if len(args) != 4{
	      return shim.Error("必须指定两个账户和相应的金额")
	}


	//判断账户是否合法
	var a = args[0]
	var avalStr = args[1]
	var b = args[2]
	var bvalStr = args[3]

	if len(a) != 2{
	    return shim.Error(a + "用户名必须大于两个字符")
	}
	if len(b) != 2{
        return shim.Error(b + "用户名必须大于两个字符")
	}

	_,err := strconv.Atoi(avalStr)
	if err != nil{
	   return shim.Error("指定账户的金额错误" + avalStr)
	}

	_,err = strconv.Atoi(bvalStr)    //思考一下
	if err != nil{
	   return shim.Error("指定账户的金额错误"+ bvalStr)
	}


	//将信息进行存储
	err = stub.PutState(a,[]byte(avalStr))
	if err != nil{
	   return shim.Error(a+"保存状态的时候发生错误")
	}
	err = stub.PutState(b,[]byte(bvalStr))
	if err != nil{
	   return shim.Error(b+"保存状态的时候发生错误")
	}
	return shim.Success("初始化成功")
}


func (t *PaymentChaincode) Invoke(stub shim.ChaincodeStubInterface) peer.Response{
	fun,args := stub.GetFunctionAndParameters()


	if fun == "find"{
	   return find(stub,args)
	}else if fun == "payment"{
	   return payment(stub,args)
	}else if fun == "del"{
	   return delAccount(stub,args)
	}else if fun == "set"{
	   return t.set(stub,args)
	}else if fun == "get"{
	  return t.get(stub,args)
	}


	return shim.Error("非法操作，指定的功能不能实现")
}

//进行账户信息查询
func find(stub shim.ChaincodeStubInterface,args []string) peer.Response{
	if len(args) != 1{
	   return shim.Error("查询的时候必须指定账号名")
	}
    
    result,err := stub.GetState(args[0])
    if err != nil{
       return shim.Error("获取账户信息时发生错误")
    }
    if result == nil{
       return shim.Error("没有获取相应账户的金额，为空")
    }
    return shim.Success(result)
}


//
func payment(stub shim.ChaincodeStubInterface,args []string) peer.Response{
	if len(args) != 3{
	   return shim.Error("必须是双方账号跟金额三个参数，参数信息不符")
	}


	var source, target string //原来账号需要转账的金额，目标账号需要接收的金额
	var x string              //转账的额度

	source = args[0]
	target = args[1]

	x = args[2]


	//原始账户减少的金额
	//目标账户增加的金额


    //查询原账户是否存在
	sval,err := stub.GetState(source)
	if err != nil{
	   return shim.Error("获取原账户的信息失败")
	}
    //查询目标账户是否存在
	tval,err := stub.GetState(source)
	if err != nil{
	   return shim.Error("获取目标账户的信息失败")
	}
    
    //实现转账
    s,err := strconv.Atoi(x)
    if err != nil{
       return shim.Error("转账金额不对，发生错误")
    }


    svi,err := strconv.Atoi(string(sval))
    if err != nil{
       return shim.Error("转账时发生错误")
    }


    tvi,err := strconv.Atoi(string(tval))
    if err != nil{
       return shim.Error("收账的时候发生错误")
    }

    if svi < s{
       return shim.Error("账户余额不足")
    }

    svi = svi -s    //原目标现在剩余的金额
    tvi = tvi +s    //目标账户目前的金额
    
    //原账户保存信息
    err = stub.PutState(source,[]byte(svi))
    if err != nil{
       return shim.Error("转账后保存原账户的信息时发生错误")
    }
    //目标账户保存信息
    err = stub.PutState(target,[]byte(tvi))
    if err != nil{
       return shim.Error("转账后保存目标账户信息失败")
    }

    return shim.Success("转账成功")
}

func delAccount(stub shim.ChaincodeStubInterface,args []string) peer.Response{
	if len(args) != 1{
	   return shim.Error("缺少删除账户信息的账户名")
	}


	result,err := stub.GetState(args[0])
	if err != nil{
	   return shim.Error(args[0] ,"%S获取账户信息失败")
	}

	if result == nil{
	   return shim.Error(args[0],"%S没有金额，金额为空")
	}

	err = stub.DelState(args[0])
	if err != nil{
	   return shim.Error("删除账号失败")
	}

	return shim.Success("%S删除账号成功",args[0])
}

//账户金额修改操作
func (t *PaymentChaincode) set(stub shim.ChaincodeStubInterface,args []string) peer.Response{
	if len(args) != 2{
	   return shim.Error("必须给定账户名跟金额数")
	}

	result,err := stub.GetState(args[0])
	if err != nil{
	   return shim.Error("查询账户信息失败")
	}

	if result == nil{
	   return shim.Error("账户不存在")
	}

	val,err := strconv.Atoi(string(result))
	if err != nil{
	   return shim.Error("处理金额时发生错误")
	}

	x,err := strconv.Atoi(string(args[1]))
	if err != nil{
	   return shim.Error("指定要存入的金额发生错误")
	}

	val = val + x   //当前的存储的金额值

	err = stub.PutState(args[0],[]byte(strconv.Itoa(val)))
	if err != nil{
	   return shim.Error("存储金额的时候发生错误")
	}

	return shim.Success("修改金额成功")

}


func (t *PaymenChaincode) get(stub shim.ChaincodeStubInterface,args []string) peer.Response{
	if len(args) != 2{
	   return shim.Error("必须指定相应的账户和金额")
	}


	result,err := stub.GetState(args[0])
	if err != nil{
	   return shim.Error("查询账户时发生错误")
	}
	if result == nil{
	   return shim.Error("查询的账户错误或者不存在")
	}

	val,err := strconv.Atoi(string(result))
	if err != nil{
	   return shim.Error("提取查看金额时发生错误")
	}
	x,err := strconv.Atoi(string(args[1]))
	if err != nil{
	   return shim.Error("提取金额时发生错误")
	}

	if val < x{
	   return shim.Error("金额不足")
	}

	val = val -x 

	err = stub.PutState(val,[]byte(strconv.Itoa(val)))
	if err != nil{
	   return shim.Error("存储失败")
	}
	return shim.Success("提取金额成功")
}














